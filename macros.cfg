# <-------------------------------------------- Filament -------------------------------------------->

[gcode_macro LOAD_FILAMENT]
gcode:
    {% if printer.toolhead.homed_axes == "xyz" %}
        RESPOND TYPE=command MSG='Moving to Service Position'
        Service_Toolhead
    {% endif %} 

    {% if printer.extruder.can_extrude|lower != 'true' %} # Checking for minimum extrusion temperature
      # Check if temperature is over the minimum extrusion temp. min_extrude_temp must be defined in the extruder config (to about 185)
      RESPOND TYPE=command MSG='Heating to Minimum Temperature'
      M104 S240 T0 # Set temperature and wait, 240 deg C is a good value for most of filament types.
    {% endif %}
       
    M82           #Set extruder to absolute mode
    G92 E0
    # Check for extruder ready - hotend temperature is high enough, extrude 50mm then check temperature again. To avoid cold extrusion when filament load was started with hot hotend but temperature set to 0
    {% if printer.extruder.can_extrude|lower != 'true' %} # Checking for minimum extrusion temperature
      # Check if temperature is over the minimum extrusion temp. min_extrude_temp must be defined in the extruder config (to about 185)
      \
      RESPOND TYPE=command MSG='Heating to Minimum Temperature'
      M109 S240 T0 # Set temperature and wait, 240 deg C is a good value for most of filament types.
    {% endif %}

    RESPOND TYPE=command MSG='Loading...'
    G1 E80 F300 # Extrude 80mm
    M400

[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% if printer.toolhead.homed_axes == "xyz" %}
        RESPOND TYPE=command MSG='Moving to Service Position'
        Service_Toolhead
    {% endif %} 
    
    Tip_Shape
    RESPOND TYPE=command MSG='Unloading...'
    G0 E-65 F{5*80}   # Retract rest of the way

[gcode_macro Tip_Shape]
gcode:
    M82 # Set extruder to absolute mode
    G92 E0
    {% if printer.extruder.can_extrude|lower != 'true' %} # Checking for minimum extrusion temperature
      # Check if temperature is over the minimum extrusion temp. min_extrude_temp must be defined in the extruder config (to about 185)
      \
      RESPOND TYPE=command MSG='Heating to Minimum Temperature'
      M109 S240 T0 # Set temperature and wait
    {% endif %}

    M106 S255 ; Set part cooling fan to 100%
    RESPOND TYPE=command MSG='Softening'
    G1 E2 F{4*60}    # Extrude a little to soften tip
    RESPOND TYPE=command MSG='Extracting to Cool Zone'
    G0 E-5 F{45*60}   # Extract filament to cold end
    RESPOND TYPE=command MSG='Retracting'
    G0 E-10 F{5*60}   # Retract out of hot zone
    M400
    M106 S0 ; Set part cooling fan to 0%


######################################################################
## Filament Change                                                  ##
######################################################################
# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 130mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "SWAP_RESUME" gcode.
[gcode_macro M600]
########### Gcode ############
gcode:
  {% set X = params.X|default(printer.configfile.config["stepper_x"]["position_endstop"]|string)|int %}
  {% set Y = params.Y|default(printer.configfile.config["stepper_y"]["position_endstop"]|string)|int %}
  {% set Z = params.Z|default(10)|int %}
  {% set E = params.E|default(-20)|int %}
  {% set tool = params.tool|default(0)|int %}

        SAVE_GCODE_STATE NAME=M600_state
        PAUSE
        G91
        G1 E-5 F4000
        G1 Z{Z}
        G90
        Service_Toolhead
        UNLOAD_FILAMENT
        G92 E0
        SET_FILAMENT_SENSOR SENSOR=e{TOOL}_runout ENABLE=0

#    Use this command resume during a mid print filament swap (DONT USE OCTO/MAINSAIL/DWC RESUME)
[gcode_macro SWAP_RESUME] 
gcode:
    RESTORE_GCODE_STATE NAME=M600_state
    SET_FILAMENT_SENSOR SENSOR=e0_runout ENABLE=1
    SET_FILAMENT_SENSOR SENSOR=e1_runout ENABLE=1
    RESUME

# <-------------------------------------------- SpoolMan -------------------------------------------->

[gcode_macro SET_ACTIVE_SPOOL]
gcode:
  {% if params.ID %}
    {% set id = params.ID|int %}
    {action_call_remote_method(
       "spoolman_set_active_spool",
       spool_id=id
    )}
  {% else %}
    {action_respond_info("Parameter 'ID' is required")}
  {% endif %}

[gcode_macro CLEAR_ACTIVE_SPOOL]
gcode:
  {action_call_remote_method(
    "spoolman_set_active_spool",
    spool_id=None
  )}

# <-------------------------------------------- Heat Soak -------------------------------------------->


[gcode_macro HEAT_SOAK]
description: Heat soak the chamber

variable_target_temp: 0
variable_stage: None ## Heating -> Soaking -> Done -> None

## in seconds
variable_check_interval: 10
variable_soak_time_remaining: 0
variable_total_time_elapsed: 0

gcode:
    {% set TARGET = params.TARGET | default(100) | float %}
    {% set DURATION = (params.DURATION | default(10) | int) * 60 %} ## minutes to seconds

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE={ TARGET }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage               VALUE="'Heating'"
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ DURATION }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    ;; fire up the heater
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={ TARGET }
    SET_FAN_SPEED FAN=Filter SPEED=1 ; Circulate the air
    SET_FAN_SPEED FAN=Bed_Fans SPEED=1 

    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ check_interval }



[gcode_macro CANCEL_HEAT_SOAK]
description: cancels an in-progress HEAT_SOAK cycle
gcode:
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'cancel'"
    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION=1


[delayed_gcode heat_soaker]
; ## debug
; { action_respond_info( printer['gcode_macro HEAT_SOAK'] | tojson )}
gcode:
    {% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}

    ## update total time elapsed
    {% set total_time_elapsed = heat_soak.total_time_elapsed + heat_soak.check_interval %}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }

    {% set stage = heat_soak.stage %}
    {% if stage == "Heating" and printer.heater_bed.temperature >= heat_soak.target_temp %}
        {% set stage = "Soaking" %}
    {% endif %}

    {% if stage == "Soaking" %}
        ## update soak countdown
        {% set soak_time_remaining = [heat_soak.soak_time_remaining - heat_soak.check_interval, 0] | max %}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ soak_time_remaining }

        {% if soak_time_remaining == 0 %}
            {% set stage = "Done" %}
        {% endif %}
    {% endif %}

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'{ stage }'"

    {% if stage in ("Done", "cancel") %}

        {% if stage == "cancel" %}
            {% set stage = "Done" %}
            TURN_OFF_HEATERS
            M107 ; turn off fan

            M117 { "soak cancelled after ~%.1fm" | format(total_time_elapsed / 60.0) }
        {% else %}
            M117 { "soak complete after %.1fm" | format(total_time_elapsed / 60.0) }
        {% endif %}

        ## reset all state vars, except stage, which may be queried via the api
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    {% else %}

        {% if total_time_elapsed % 90 == 0 %}
            ## output status periodically
            {% if stage == "Heating" %}
                M117 { "Heating -- %.1fm elapsed" | format(total_time_elapsed / 60.0) }
            {% elif stage == "Soaking" %}
                M117 { "Soaking -- %.1fm remaining" | format(soak_time_remaining / 60.0) }
            {% endif %}
        {% endif %}

        ## trigger ourselves again
        UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ heat_soak.check_interval }

        ## dwell for 1ms to prevent from going idle
        G4 P1

    {% endif %}

# <-------------------------------------------- Movement -------------------------------------------->

# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

        # Set tiny pattern box around center point
        {% set x_center_min_tiny = x_center - (smallpatternsize/5) %}
        {% set x_center_max_tiny = x_center + (smallpatternsize/5) %}
        {% set y_center_min_tiny = y_center - (smallpatternsize/5) %}
        {% set y_center_max_tiny = y_center + (smallpatternsize/5) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        DETACH_PROBE
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small patternbox
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}

        # Tiny patternbox vibration
        G0 X{x_center_min_tiny} Y{y_center_min} F{speed*60}
        G0 X{x_center_max_tiny} Y{y_center_max} F{speed*60}
        G0 X{x_center_min_tiny} Y{y_center_min} F{speed*60}
        G0 X{x_center_max_tiny} Y{y_center_max} F{speed*60}
        G0 X{x_center_min_tiny} Y{y_center_min} F{speed*60}
        G0 X{x_center_max_tiny} Y{y_center_max} F{speed*60}
        G0 X{x_center_min_tiny} Y{y_center_min} F{speed*60}
        G0 X{x_center_max_tiny} Y{y_center_max} F{speed*60}
        G0 X{x_center_min_tiny} Y{y_center_min} F{speed*60}
        G0 X{x_center_max_tiny} Y{y_center_max} F{speed*60}
        G0 X{x_center_min_tiny} Y{y_center_min} F{speed*60}
        G0 X{x_center_max_tiny} Y{y_center_max} F{speed*60}

        G0 X{x_center_min_tiny} Y{y_center_max} F{speed*60}
        G0 X{x_center_max_tiny} Y{y_center_min} F{speed*60}
        G0 X{x_center_min_tiny} Y{y_center_max} F{speed*60}
        G0 X{x_center_max_tiny} Y{y_center_min} F{speed*60}
        G0 X{x_center_min_tiny} Y{y_center_max} F{speed*60}
        G0 X{x_center_max_tiny} Y{y_center_min} F{speed*60}
        G0 X{x_center_min_tiny} Y{y_center_max} F{speed*60}
        G0 X{x_center_max_tiny} Y{y_center_min} F{speed*60}
        G0 X{x_center_min_tiny} Y{y_center_max} F{speed*60}
        G0 X{x_center_max_tiny} Y{y_center_min} F{speed*60}
        G0 X{x_center_min_tiny} Y{y_center_max} F{speed*60}
        G0 X{x_center_max_tiny} Y{y_center_min} F{speed*60}

        G0 X{x_center_min_tiny} Y{y_center_min} F{speed*60}
        G0 X{x_center_min_tiny} Y{y_center_max} F{speed*60}
        G0 X{x_center_max_tiny} Y{y_center_max} F{speed*60}
        G0 X{x_center_max_tiny} Y{y_center_min} F{speed*60}
        G0 X{x_center_min_tiny} Y{y_center_min} F{speed*60}
        G0 X{x_center_min_tiny} Y{y_center_max} F{speed*60}
        G0 X{x_center_max_tiny} Y{y_center_max} F{speed*60}
        G0 X{x_center_max_tiny} Y{y_center_min} F{speed*60}
        G0 X{x_center_min_tiny} Y{y_center_min} F{speed*60}
        G0 X{x_center_min_tiny} Y{y_center_max} F{speed*60}
        G0 X{x_center_max_tiny} Y{y_center_max} F{speed*60}
        G0 X{x_center_max_tiny} Y{y_center_min} F{speed*60}


    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED

# <-------------------------------------------- Cartographer -------------------------------------------->

[gcode_macro PROBE_CALIBRATE]
gcode:
    CARTOGRAPHER_CALIBRATE

[gcode_macro G29]
gcode: 
    BED_MESH_CALIBRATE

#[gcode_macro BED_MESH_CALIBRATE]
#rename_existing: _BED_MESH_CALIBRATE
#gcode:
    #{% set TARGET_TEMP = printer.heater_bed.target %}
    #M140 S0
    #_BED_MESH_CALIBRATE {rawparams}
    #M140 S{TARGET_TEMP}#

[gcode_macro EST_BACKLASH]
gcode:
    CARTOGRAPHER_ESTIMATE_BACKLASH   

[gcode_macro Cartographer_Set_Model]
gcode:
    RESPOND TYPE=command MSG="action:prompt_begin Cartograph Model"
    RESPOND TYPE=command MSG="action:prompt_text Select a model"
    RESPOND TYPE=command MSG="action:prompt_button Default|CARTOGRAPHER_MODEL_SELECT NAME=default|primary"
    RESPOND TYPE=command MSG="action:prompt_button_group_start"
    RESPOND TYPE=command MSG="action:prompt_button Hot|CARTOGRAPHER_MODEL_SELECT NAME=hot|secondary"
    RESPOND TYPE=command MSG="action:prompt_button PEI Smooth|CARTOGRAPHER_MODEL_SELECT NAME=PEI Smooth|seconday"
    RESPOND TYPE=command MSG="action:prompt_button_group_end"
    RESPOND TYPE=command MSG="action:prompt_show"

[gcode_macro Cartographer_Temp_Diff_Calibrate]
gcode:
  {% set bed_temp = params.BED_TEMP|default(90)|int %}
  {% set nozzle_temp = params.NOZZLE_TEMP|default(250)|int %}
  {% set min_temp = params.MIN_TEMP|default(40)|int %}
  {% set max_temp = params.MAX_TEMP|default(70)|int %}
  G90
  RESPOND TYPE=command MSG='Waiting for Coil to cool to 40 (1/4)'
  M117 Waiting for Coil to cool to 40
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MAXIMUM={min_temp}
  RESPOND TYPE=command MSG='Starting Phase 1 of 4'
  M117 Starting Phase 1 of 4
  M106 S0
  G28
  G0 Z1
  M104 S{nozzle_temp}
  M140 S{bed_temp}
  G4 P1000
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MINIMUM={min_temp}
  CARTOGRAPHER_STREAM FILENAME=data1
  M117 Waiting for Coil to heat to 70
  RESPOND TYPE=command MSG='Waiting for Coil to heat to 70 (1/4)'
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MINIMUM={max_temp}
  CARTOGRAPHER_STREAM FILENAME=data1
  G4 P1000
  M104 S0
  M140 S0
  M106 S255
  G0 Z80
  RESPOND TYPE=command MSG='Waiting for Coil to cool to 40 (2/4)'
  M117 Waiting for Coil to cool to 40
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MAXIMUM={min_temp}
  M117 Starting Phase 2 of 4
  RESPOND TYPE=command MSG='Starting Phase 2 of 4'
  M106 S0
  G28 Z0
  G0 Z2
  M104 S{nozzle_temp}
  M140 S{bed_temp}
  G4 P1000
  CARTOGRAPHER_STREAM FILENAME=data2
  M117 Waiting for Coil to heat to 70
  RESPOND TYPE=command MSG='Waiting for Coil to heat to 70 (2/4)'
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MINIMUM={max_temp}
  CARTOGRAPHER_STREAM FILENAME=data2
  M104 S0
  M140 S0
  M106 S255
  G0 Z80
  RESPOND TYPE=command MSG='Waiting for Coil to cool to 40 (3/4)'
  M117 Waiting for Coil to cool to 40
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MAXIMUM={min_temp}
  M117 "Starting Phase 3 of 4"
  RESPOND TYPE=command MSG='Starting Phase 3 of 4'
  M106 S0
  G28 Z0
  G0 Z3
  M104 S{nozzle_temp}
  M140 S{bed_temp}
  G4 P1000
  CARTOGRAPHER_STREAM FILENAME=data3
  M117 Waiting for Coil to heat to 70
  RESPOND TYPE=command MSG='Waiting for Coil to heat to 70 (3/4)'
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MINIMUM={max_temp}
  CARTOGRAPHER_STREAM FILENAME=data3
  M104 S0
  M140 S0
  M106 S255
  G0 Z80
  M117 Waiting for Coil to cool to 40
  RESPOND TYPE=command MSG='Waiting for Coil to cool to 40 (4/4)'
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MAXIMUM={min_temp}
  M117 "Starting Phase 4 of 4"
  RESPOND TYPE=command MSG='Starting Phase 4 of 4'
  M106 S0
  G28 Z0
  G0 Z5
  M104 S{nozzle_temp}
  M140 S{bed_temp}
  G4 P1000
  CARTOGRAPHER_STREAM FILENAME=data4
  M117 Waiting for Coil to heat to 70
  RESPOND TYPE=command MSG='Waiting for Coil to heat to 70 (4/4)'
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MINIMUM={max_temp}
  CARTOGRAPHER_STREAM FILENAME=data4
  M104 S0
  M140 S0
  RESPOND TYPE=command MSG='Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/'
  M117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/"
  RESPOND TYPE=command MSG='Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta'
  M117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"


# <-------------------------------------------- Power -------------------------------------------->

[gcode_macro PowerOff]
gcode:
  {action_call_remote_method("set_device_power",
                             device="VzBot",
                             state="off")}

[gcode_macro PowerON]
gcode:
  {action_call_remote_method("set_device_power",
                             device="VzBot",
                             state="on")}

[delayed_gcode delayed_printer_off]
initial_duration: 0.
gcode:
  {% if printer.idle_timeout.state == "Idle" %}
    PowerOff
  {% endif %}

[idle_timeout]
gcode:
  M84
  TURN_OFF_HEATERS
  UPDATE_DELAYED_GCODE ID=delayed_printer_off DURATION=60